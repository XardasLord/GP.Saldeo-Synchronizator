// <auto-generated />
using System;
using GP.SS.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace GP.SS.Database.Migrations
{
    [DbContext(typeof(SaldeoSynchronizatorContext))]
    [Migration("20190726164301_AddedProjectColumnToDocumentsTable")]
    partial class AddedProjectColumnToDocumentsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<DateTime?>("EndedAt");

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("Failed");

                    b.Property<string>("StackTrace");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<string>("TypeFullPath");

                    b.HasKey("Id");

                    b.ToTable("Coravel_JobHistory");
                });

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelScheduledJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CronExpression");

                    b.Property<string>("Days");

                    b.Property<string>("Frequency");

                    b.Property<string>("InvocableFullPath");

                    b.Property<bool>("PreventOverlapping");

                    b.HasKey("Id");

                    b.ToTable("Coravel_ScheduledJobs");
                });

            modelBuilder.Entity("Coravel.Pro.EntityFramework.CoravelScheduledJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<DateTime?>("EndedAt");

                    b.Property<string>("ErrorMessage");

                    b.Property<bool>("Failed");

                    b.Property<string>("StackTrace");

                    b.Property<string>("TypeFullPath");

                    b.HasKey("Id");

                    b.ToTable("Coravel_ScheduledJobHistory");
                });

            modelBuilder.Entity("GP.SS.Domain.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("CompanyProgramId");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Postcode");

                    b.Property<string>("ShortName");

                    b.Property<string>("Street");

                    b.Property<string>("Telephone");

                    b.Property<string>("Username");

                    b.Property<string>("VatNumber");

                    b.HasKey("Id");

                    b.ToTable("Saldeo_Companies");
                });

            modelBuilder.Entity("GP.SS.Domain.Contractor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("CompanyId");

                    b.Property<string>("ContractorProgramId");

                    b.Property<string>("Emails");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsCustomer");

                    b.Property<bool>("IsSupplier");

                    b.Property<string>("Postcode");

                    b.Property<string>("ShortName");

                    b.Property<string>("Street");

                    b.Property<string>("Telephone");

                    b.Property<string>("VatNumber");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Saldeo_Contractors");
                });

            modelBuilder.Entity("GP.SS.Domain.Document", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("CompanyId");

                    b.Property<string>("ContractorCity");

                    b.Property<string>("ContractorFullName");

                    b.Property<bool>("ContractorIsCustomer");

                    b.Property<bool>("ContractorIsSupplier");

                    b.Property<string>("ContractorPostcode");

                    b.Property<string>("ContractorShortName");

                    b.Property<string>("ContractorStreet");

                    b.Property<string>("ContractorTelephone");

                    b.Property<string>("ContractorVatNumber");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentTypeName");

                    b.Property<string>("DocumentTypeShortName");

                    b.Property<bool>("IsDocumentPaid");

                    b.Property<string>("IssueDate");

                    b.Property<string>("Number")
                        .HasColumnName("Numer_dok");

                    b.Property<string>("PaymentDate");

                    b.Property<string>("PaymentType");

                    b.Property<string>("Project");

                    b.Property<string>("ReceiveDate");

                    b.Property<string>("SaleDate");

                    b.Property<string>("Sum");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Saldeo_Documents");
                });

            modelBuilder.Entity("GP.SS.Domain.DocumentItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Description");

                    b.Property<string>("DocumentId");

                    b.Property<string>("Netto");

                    b.Property<string>("Rate");

                    b.Property<string>("Vat");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Saldeo_DocumentItems");
                });

            modelBuilder.Entity("GP.SS.Domain.DocumentVatRegistry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocumentId");

                    b.Property<string>("Netto");

                    b.Property<string>("Rate");

                    b.Property<string>("Vat");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Saldeo_DocumentVatRegistries");
                });

            modelBuilder.Entity("GP.SS.Domain.Contractor", b =>
                {
                    b.HasOne("GP.SS.Domain.Company", "Company")
                        .WithMany("Contractors")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("GP.SS.Domain.Document", b =>
                {
                    b.HasOne("GP.SS.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("GP.SS.Domain.DocumentItem", b =>
                {
                    b.HasOne("GP.SS.Domain.Document", "Document")
                        .WithMany("DocumentItems")
                        .HasForeignKey("DocumentId");
                });

            modelBuilder.Entity("GP.SS.Domain.DocumentVatRegistry", b =>
                {
                    b.HasOne("GP.SS.Domain.Document", "Document")
                        .WithMany("DocumentVatRegistries")
                        .HasForeignKey("DocumentId");
                });
#pragma warning restore 612, 618
        }
    }
}
